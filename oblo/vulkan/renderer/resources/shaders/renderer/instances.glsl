#ifndef OBLO_INCLUDE_RENDERER_INSTANCES
#define OBLO_INCLUDE_RENDERER_INSTANCES

// These are required to use this header
// #extension GL_EXT_buffer_reference : require
// #extension GL_ARB_gpu_shader_int64 : require

#define OBLO_BINDING_INSTANCE_DATA_TABLES 36

#define OBLO_INSTANCE_DATA_CAT(A, B) A##B

/// Gets the id of the intance buffer, ids are generated by draw_registry and added to shaders by pass_manager
#define OBLO_INSTANCE_DATA_ID(Instance) OBLO_INSTANCE_DATA_CAT(OBLO_INSTANCE_DATA_, Instance)

/// Gets the instance data from a table, automatically casting to a buffer reference named MyInstanceType, where
/// MyInstance is the second argument
#define OBLO_INSTANCE_DATA(TableId, Instance, Index)                                                                   \
    (OBLO_INSTANCE_DATA_CAT(Instance, Type)(                                                                           \
         get_instance_data(g_InstanceTables[TableId], OBLO_INSTANCE_DATA_ID(Instance))))                               \
        .values[Index]

#define OBLO_INSTANCE_DATA_MAX 32

struct instance_table
{
    uint64_t bufferAddress[OBLO_INSTANCE_DATA_MAX];
};

layout(std430, binding = OBLO_BINDING_INSTANCE_DATA_TABLES) restrict readonly buffer b_InstanceTables
{
    instance_table g_InstanceTables[];
};

uint64_t get_instance_data(in instance_table t, in uint instanceDataId)
{
    return t.bufferAddress[instanceDataId];
}

#endif