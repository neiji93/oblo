#version 460

#extension GL_GOOGLE_include_directive : require

#include <renderer/debug/printf>
#include <surfels/buffers/surfel_data_w>
#include <surfels/buffers/surfel_grid_r>
#include <surfels/buffers/surfel_spawn_data_w>
#include <surfels/buffers/surfel_stack_rw>
#include <surfels/surfel>

layout(std430, binding = 0) restrict readonly buffer b_TileCoverage
{
    surfel_tile_data g_TileData;
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform c_PushConstants
{
    uint currentTimestamp;
}
g_Constants;

void main()
{
    const surfel_tile_data tile = g_TileData;

    if (ecs_entity_is_valid(tile.spawnData.entity) && tile.coverage < NO_SURFELS_NEEDED)
    {
        uint newSurfelId;
        const bool allocated = surfel_stack_allocate(newSurfelId);

#if OBLO_DEBUG_PRINTF
        {
            // printf_int("[SPAWN] Allocated, available: ", g_SurfelStackHeader.available);
            // printf_int("[SPAWN] Entity: ", tile.spawnData.entity.id);
            // printf_float("[SPAWN] Coverage: ", tile.coverage);

            if (allocated)
            {
                // printf_int("[SPAWN] Spawn id: ", newSurfelId);
                debugPrintfEXT("[SPAWN] Id: %d Entity: %d Coverage: %f\n", tile.spawnData.entity.id, tile.coverage);
            }
            // else
            // {
            //     printf_int("[SPAWN] Failed to allocate, available: ", g_SurfelStackHeader.available);
            // }
        }
#endif

        if (allocated)
        {
            g_SurfelSpawnData[newSurfelId] = tile.spawnData;
            g_SurfelData[newSurfelId].radius = 42.f; // Kist to make them recognizable
            g_SurfelData[newSurfelId].lastUsedTimestamp = g_Constants.currentTimestamp;
        }
    }
}