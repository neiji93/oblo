#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_control_flow_attributes : require

#include <ecs/entity_set>
#include <renderer/debug/printf>
#include <renderer/geometry/barycentric>
#include <renderer/instances>
#include <renderer/meshes/mesh_attributes>
#include <renderer/meshes/mesh_data>
#include <renderer/meshes/mesh_indices>
#include <renderer/meshes/mesh_table>
#include <renderer/transform>
#include <surfels/buffers/surfel_data_rw>
#include <surfels/buffers/surfel_grid_rw>
#include <surfels/buffers/surfel_spawn_data_rw>
#include <surfels/buffers/surfel_stack_rw>
#include <surfels/surfel>
#include <surfels/surfel_data>
#include <visibility/visibility_buffer>

layout(local_size_x = OBLO_SUBGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform c_PushConstants
{
    uint maxSurfels;
    uint currentTimestamp;
}
g_Constants;

void surfel_kill(in uint surfelId)
{
#if OBLO_DEBUG_PRINTF
    debugPrintfEXT("[UPDATE] Killing surfel %d\n", surfelId);
#endif

    // We invalidate surfel_data::radius to signal it's not alive
    // We invalidate it even if we don't kill it because it won't have an effect
    g_SurfelData[surfelId] = surfel_data_invalid();
    g_SurfelSpawnData[surfelId] = surfel_spawn_data_invalid();

    surfel_stack_free(surfelId);
}

bool surfel_reject(in uint surfelId)
{
    const uint killFramesThreshold = 300;

    const surfel_data surfelData = g_SurfelData[surfelId];

    const uint dt = g_Constants.currentTimestamp - surfelData.lastUsedTimestamp;

    if (dt <= killFramesThreshold)
    {
        return false;
    }

    surfel_kill(surfelId);
    return true;
}

void main()
{
    const uint surfelId = gl_GlobalInvocationID.x;

#if OBLO_DEBUG_PRINTF
    if (surfelId == 0)
    {
        debugPrintfEXT("[UPDATE] Alive surfels count: %d\n", (1 << 14) - (g_SurfelStackHeader.available));
    }
#endif

    if (surfelId >= g_Constants.maxSurfels)
    {
        return;
    }

    const surfel_spawn_data surfel = g_SurfelSpawnData[surfelId];

    if (!surfel_spawn_data_is_alive(surfel))
    {
        return;
    }

    ecs_entity_set_entry entitySetEntry;

    if (!ecs_entity_set_try_find(surfel.entity, entitySetEntry))
    {
#if OBLO_DEBUG_PRINTF
        if (surfel.entity.id != 0)
            debugPrintfEXT("[UPDATE] Entity not alive: %u\n", surfel.entity.id);
#endif
        surfel_kill(surfelId);
        return;
    }

    visibility_buffer_data vb;
    visibility_buffer_parse_instance_ids(entitySetEntry.globalInstanceId, vb);
    visibility_buffer_parse_meshlet_ids(surfel.packedMeshletAndTriangleId, vb);

    const mesh_handle mesh = OBLO_INSTANCE_DATA(vb.instanceTableId, i_MeshHandles, vb.instanceId);
    const transform transform = OBLO_INSTANCE_DATA(vb.instanceTableId, i_TransformBuffer, vb.instanceId);

    // Read the mesh data
    const mesh_table meshTable = mesh_table_fetch(mesh);
    const uvec3 vertexIndices = mesh_get_meshlet_indices(meshTable, mesh, vb.meshletId, vb.meshletTriangleId);

    vec3 triangleWS[3];

    // Read the position, to see if the surfel falls within our grid
    [[unroll]] for (uint i = 0; i < 3; ++i)
    {
        const uint vertexId = vertexIndices[i];

        const vec3 vertexPosition = mesh_get_position(meshTable, vertexId);
        triangleWS[i] = (transform.localToWorld * vec4(vertexPosition, 1)).xyz;
    }

    barycentric_coords bc;
    bc.lambda = vec3(surfel.barycentricU, surfel.barycentricV, 1 - surfel.barycentricU - surfel.barycentricV);

    const vec3 positionWS = barycentric_interpolate(bc, triangleWS);

    const surfel_grid_header gridHeader = g_SurfelGridHeader;

    const ivec3 cell = surfel_grid_find_cell(gridHeader, positionWS);

    // #if OBLO_DEBUG_PRINTF
    //     // if (g_SurfelData[surfelId].radius > 40)
    //     {
    //         debugPrintfEXT("[UPDATE] Spawned %d on entity %d at: [%f %f %f]\n", surfelId, surfel.entity.id,
    //         positionWS.x, positionWS.y, positionWS.z);
    //     }
    // #endif

    if (!surfel_grid_has_cell(gridHeader, cell))
    {
        // printf_uvec3("[UPDATE] Surfel out of bounds at cell: ", cell);
        // When the surfel is out of cell boundaries, we don't update it
        surfel_reject(surfelId);
        return;
    }

    const uint cellIndex = surfel_grid_cell_index(gridHeader, cell);

    const uint newIndex = atomicAdd(g_SurfelGridCells[cellIndex].surfelsCount, 1);

    if (newIndex >= SURFEL_MAX_PER_CELL)
    {
        // We already have the maximum amount of surfels per grid
// #if OBLO_DEBUG_PRINTF
//         debugPrintfEXT("[UPDATE] Overflowing cell: %d %d %d [Count: %u]\n", cell.x, cell.y, cell.z, newIndex);
// #endif

        // TODO: Should we reject? It might be a good idea to free some space

        // If the surfel is killed, we can return, otherwise we still update it, so that the next frame grid has
        // consistent data that can be used for the next round of tiling
        if (surfel_reject(surfelId))
        {
            return;
        }
    }

    vec3 triangleNormal[3];

    // We accepted the surfel, time to update
    [[unroll]] for (uint i = 0; i < 3; ++i)
    {
        const uint vertexId = vertexIndices[i];

        const vec3 vertexNormal = mesh_get_normal(meshTable, vertexId);
        triangleNormal[i] = vertexNormal;
    }

    const vec3 N = normalize(barycentric_interpolate(bc, triangleNormal));
    const vec3 normalWS = normalize(mat3(transform.normalMatrix) * N);

    surfel_data updatedData;
    updatedData.positionWS = positionWS;
    updatedData.normalWS = normalWS;
    updatedData.radius = 0.01f; // TODO: Calculate the radius based on screen-space size
    updatedData.lastUsedTimestamp = g_Constants.currentTimestamp;

    g_SurfelData[surfelId] = updatedData;
    g_SurfelGridCells[cellIndex].surfels[newIndex] = surfelId;

    // debugPrintfEXT("[UPDATE] Surfel %u alive: %u\n", surfelId, uint(surfel.alive));
    // debugPrintfEXT("[UPDATE] Fill cell: %u\n", cell);
    // debugPrintfEXT("[UPDATE] Current surfels in cell: %u\n", newIndex);

    // debugPrintfEXT("Fill cell: [ %d %d %d ] (%u) with %u\n", cell.x, cell.y, cell.z, cellIndex, surfelId);
}